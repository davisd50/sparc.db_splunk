Splunk query, result, and value components
---------------------------------------------
These components are used to interact with the Splunk API.

A Query
--------
A query is a simple interface used to store a string that can be used to 
query a database.

>>> from zope.component import createObject
>>> query = createObject(u"sparc.db.splunk.query", u"a simple query string")

>>> from sparc.db_splunk import ISplunkQuery
>>> ISplunkQuery.providedBy(query)
True

Query strings need to be unicode
>>> from zope.schema import ValidationError
>>> try:
...     createObject(u"sparc.db.splunk.query", "an invalid non-unicode string")
...     assert False
... except ValidationError:
...     pass

Splunk Query Result Set
------------------------
A result set is an iterator for a set of Splunk search results.

Create a mock response stream of Splunk XML data
>>> from sparc.db_splunk import ISplunkResultsStream
>>> from sparc.db_splunk.tests import mock_result_stream
>>> import sparc.db.splunk.tests
>>> response = mock_result_stream()
>>> ISplunkResultsStream.providedBy(response)
True

Get the result set via adaptation.
>>> from sparc.db import IQueryResultSet
>>> result_set = IQueryResultSet(response)
>>> result_list = list(result_set)
>>> len(result_list)
2
>>> entry = result_list[0]

Now lets test the entry to make sure it acts as expected, here's a standard entry
>>> from sparc.db import ITabularResult, IResultValue, IResultMultiValue
>>> entry['identity']
'user1'
>>> ITabularResult.providedBy(entry)
True
>>> IResultValue.providedBy(entry['identity'])
True

Here's a multi-value entry
>>> list(entry['Login_Time'])
['01/20/2016 10:52:22', '01/20/2016 10:52:31', '01/20/2016 10:52:32']
>>> IResultMultiValue.providedBy(entry['Login_Time'])
True

A Query Event
--------------
It is sometimes useful to represent a query as a Sparc event, in essence
this will be a point in time query with results.  In order to test this,
we'll need to simulate results.  This requires some implementation of 
IQueryResultSet, we'll use the sparc.db.splunk package for this purpose.

First, let's create our results set
>>> from sparc.db import IQueryResultSet
>>> from sparc.db_splunk.tests import mock_result_stream
>>> response = mock_result_stream()
>>> results = IQueryResultSet(response)

We can now start to create our required kwargs for a query event creation, we
start with the query and results
>>> kwargs = {'query': query, 'results': results}

We also need to provide additional arguments to satisfy the sparc.event.IEvent
and sparc.entity.IEntity interfaces as well.

>>> from datetime import datetime
>>> kwargs['datetime'] = datetime(2016, 1, 1, 0, 0)
>>> kwargs['id'] = str(hash(query.query + str(kwargs['datetime'])))
>>> kwargs['name'] = u'A query event'
>>> kwargs['description'] = u'A query event description'

We're now ready to create our query event
>>> from sparc.db import IQueryEvent
>>> query_event = createObject(u'sparc.db.query_event', **kwargs)
>>> IQueryEvent.providedBy(query_event)
True

Let's check our object's functions
>>> query_event.getId()
'-1697405257974171195'
>>> query_event.name
u'A query event'
>>> query_event.query
u'a simple query string'
>>> entry = list(query_event)[0]
>>> entry['identity']
'user1'
